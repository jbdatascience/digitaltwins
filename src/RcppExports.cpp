// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// forward_backward_
NumericVector forward_backward_(NumericVector x, NumericVector p1, NumericVector p2, NumericVector d, int p, double lambda, double epsilon, int start, int end);
RcppExport SEXP _digitaltwins_forward_backward_(SEXP xSEXP, SEXP p1SEXP, SEXP p2SEXP, SEXP dSEXP, SEXP pSEXP, SEXP lambdaSEXP, SEXP epsilonSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_backward_(x, p1, p2, d, p, lambda, epsilon, start, end));
    return rcpp_result_gen;
END_RCPP
}
// sample_ancestry_
NumericVector sample_ancestry_(NumericVector x, NumericVector p1, NumericVector p2, NumericVector d, int p, double lambda, double epsilon);
RcppExport SEXP _digitaltwins_sample_ancestry_(SEXP xSEXP, SEXP p1SEXP, SEXP p2SEXP, SEXP dSEXP, SEXP pSEXP, SEXP lambdaSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_ancestry_(x, p1, p2, d, p, lambda, epsilon));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_digitaltwins_forward_backward_", (DL_FUNC) &_digitaltwins_forward_backward_, 9},
    {"_digitaltwins_sample_ancestry_", (DL_FUNC) &_digitaltwins_sample_ancestry_, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_digitaltwins(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
